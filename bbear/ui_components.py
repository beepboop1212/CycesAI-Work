# ui_components.py
import streamlit as st

# This function will be called from app.py when a template selection button is clicked
# It sets a session state variable that app.py's main loop will detect.
def trigger_template_selection_action(template_uid):
    st.session_state.action_select_template_uid = template_uid
    # No st.rerun() here, app.py's main loop will handle it after processing this action.

def display_selected_template_card(template_details):
    """Displays the card for the currently selected template."""
    if not template_details:
        st.empty() # Clear the area if no template is selected
        return

    with st.container(border=True): # Use a container for better grouping and potential styling
        st.subheader("‚úÖ Current Template for Editing:")
        details = template_details # Use passed argument
        
        col1_sel, col2_sel = st.columns([1, 1.5]) # Adjust ratio as needed
        with col1_sel:
            if details.get('preview_url'):
                st.image(details.get('preview_url'), caption=f"{details.get('name', 'N/A')}", use_container_width=True)
        
        with col2_sel:
            st.markdown(f"**Name:** {details.get('name', 'N/A')}")
            st.markdown(f"**UID:** `{details.get('uid')}`")
            st.markdown("**Editable Layers:**")
            available_mods = details.get('available_modifications', [])
            if available_mods:
                layer_info_md = ""
                for layer in available_mods:
                    layer_name = layer.get('name', 'Unnamed Layer')
                    layer_type = "Unknown" # Default
                    if "text" in layer: layer_type = "Text"
                    elif "image_url" in layer: layer_type = "Image"
                    elif "color" in layer: layer_type = "Color"
                    # Add more specific checks if Bannerbear provides more type hints
                    layer_info_md += f"- `{layer_name}` ({layer_type})\n"
                st.markdown(layer_info_md)
            else:
                st.warning("This template has no directly listed editable modifications.")
        st.markdown("---")

def display_final_generated_image(image_bytes, image_url, template_uid):
    """Displays the final generated image and download button."""
    if image_bytes:
        with st.container(border=True):
            st.header("üéâ Your Banner is Ready!")
            st.image(image_bytes, caption="Generated by Bannerbear", use_container_width=True)
            st.download_button(
                label="üì• Download Image",
                data=image_bytes,
                file_name=f"bannergenie_{template_uid or 'image'}.png",
                mime="image/png"
            )

    elif image_url: # Fallback if bytes couldn't be fetched but URL exists
        with st.container(border=True):
            st.header("üéâ Your Banner is Ready!")
            st.markdown(f"Image URL: [{image_url}]({image_url})")
            st.info("Could not fetch image for direct preview/download. Use the link above.")
    else:
        st.empty() # Clear if no image

def display_pending_image_uploader_ui(target_layer_name, on_upload_callback, on_cancel_callback):
    """Displays the file uploader if an image upload is pending for a layer."""
    if not target_layer_name or not st.session_state.get('freeimage_api_key_ok', False):
        if target_layer_name and not st.session_state.get('freeimage_api_key_ok', False):
             st.warning(f"Cannot upload image for '{target_layer_name}': Freeimage.host API Key is missing or invalid.")
        return

    with st.expander(f"üñºÔ∏è Upload Image for Layer: '{target_layer_name}'", expanded=True):
        uploaded_file = st.file_uploader(
            f"Choose an image for '{target_layer_name}'...",
            type=["png", "jpg", "jpeg", "webp"],
            key=f"uploader_for_{target_layer_name.replace(' ', '_')}" # Sanitize key
        )
        
        col_confirm, col_cancel = st.columns(2)
        with col_confirm:
            if uploaded_file:
                st.button(
                    f"Confirm Upload: {uploaded_file.name}",
                    on_click=on_upload_callback, # app.py will define this
                    args=(uploaded_file, target_layer_name),
                    key=f"confirm_upload_btn_{target_layer_name.replace(' ', '_')}",
                    use_container_width=True
                )
        with col_cancel:
            st.button(
                f"Cancel Image Upload",
                on_click=on_cancel_callback, # app.py will define this
                args=(target_layer_name,),
                key=f"cancel_upload_btn_{target_layer_name.replace(' ', '_')}",
                use_container_width=True
            )

def display_chat_history_item(message_data, index_in_history, all_templates_data):
    """Displays a single item from the chat history, including template previews if needed."""
    with st.chat_message(message_data["role"]):
        st.markdown(message_data["content"])
        
        # If assistant intended to show template previews
        if message_data["role"] == "assistant" and message_data.get("display_templates_now"):
            if all_templates_data: # Check if templates data is available
                st.markdown("Click on a template below to select it:")
                # Let user choose number of columns for display
                # Key needs to be unique if this input is rendered multiple times in a loop or for different messages
                num_cols_key = f"template_display_cols_{index_in_history}"
                num_columns = st.number_input("Columns for template display", 1, 5, 3, key=num_cols_key)
                
                cols = st.columns(num_columns)
                for idx, template in enumerate(all_templates_data):
                    with cols[idx % num_columns]:
                        card = st.container(border=True)
                        card.markdown(f"**{template.get('name', 'Unnamed')}**")
                        card.caption(f"UID: `{template.get('uid')}`")
                        if template.get('preview_url'):
                            card.image(template.get('preview_url'), use_container_width=True)
                        else:
                            card.caption("No preview available")
                        
                        # Button to trigger selection
                        # The actual selection logic will be handled in app.py based on session_state change
                        card.button(
                            "Select this Template", 
                            key=f"select_btn_in_chat_{template.get('uid')}_{index_in_history}", # Ensure key is super unique
                            on_click=trigger_template_selection_action, # Uses the helper from this module
                            args=(template.get('uid'),), # Pass UID to callback
                            use_container_width=True
                        )
            else:
                st.markdown("No templates found, or there was an error fetching them.")
            
            # Consume the flag after attempting to display
            # This should be done in app.py's loop after calling this display function
            # to ensure it's only popped if display was successful / attempted.
            # For now, app.py will handle popping it.